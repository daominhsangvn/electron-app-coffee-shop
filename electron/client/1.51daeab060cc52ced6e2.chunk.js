webpackJsonp([1],{227:function(n,t){angular.module("angularPromiseButtons",[]),angular.module("angularPromiseButtons").directive("promiseBtn",["angularPromiseButtons","$parse",function(n,t){"use strict";var i="click",e="ngClick",a="submit",r="ngSubmit";return{restrict:"EA",scope:{promiseBtn:"=",promiseBtnOptions:"=?"},link:function(s,o,l){function handleLoading(n){c.btnLoadingClass&&!c.addClassToCurrentBtnOnly&&n.addClass(c.btnLoadingClass),c.disableBtn&&!c.disableCurrentBtnOnly&&n.attr("disabled","disabled")}function handleLoadingFinished(n){c.btnLoadingClass&&n.removeClass(c.btnLoadingClass),c.disableBtn&&n.removeAttr("disabled")}function initPromiseWatcher(n,t){s.$watch(n,function(n){n&&n.then?(handleLoading(t),n.finally(function(){handleLoadingFinished(t)})):n&&n.$promise&&(handleLoading(t),n.$promise.finally(function(){handleLoadingFinished(t)}))})}function getCallbacks(n){return n.split(";").map(function(n){return t(n)})}function appendSpinnerTpl(n){n.append(c.spinnerTpl)}function addHandlersForCurrentBtnOnly(n){c.addClassToCurrentBtnOnly&&n.on(i,function(){n.addClass(c.btnLoadingClass)}),c.disableCurrentBtnOnly&&n.on(i,function(){n.attr("disabled","disabled")})}function initHandlingOfViewFunctionsReturningAPromise(n,t,i){s.$evalAsync(function(){var e=getCallbacks(l[t]);o.unbind(n),o.bind(n,function(){s.$apply(function(){e.forEach(function(t){var e=t(s.$parent,{$event:n});u||(u=initPromiseWatcher(function(){return e},i))})})})})}function getSubmitBtnChildren(n){for(var t=[],i=n.find("button"),e=0;e<i.length;e++){var a=i[e];"submit"===angular.element(a).attr("type")&&t.push(a)}return angular.element(t)}var u,d=n.config,c=d;if(l.promiseBtn)appendSpinnerTpl(o),addHandlersForCurrentBtnOnly(o),initPromiseWatcher(function(){return s.promiseBtn},o);else if(l.hasOwnProperty(e))appendSpinnerTpl(o),addHandlersForCurrentBtnOnly(o),initHandlingOfViewFunctionsReturningAPromise(i,e,o);else if(l.hasOwnProperty(r)){var p=getSubmitBtnChildren(o);appendSpinnerTpl(p),addHandlersForCurrentBtnOnly(p),initHandlingOfViewFunctionsReturningAPromise(a,r,p)}s.$watch("promiseBtnOptions",function(n){angular.isObject(n)&&(c=angular.extend({},d,n))},!0)}}}]),angular.module("angularPromiseButtons").provider("angularPromiseButtons",function(){"use strict";var n={spinnerTpl:'<span class="btn-spinner"></span>',disableBtn:!0,btnLoadingClass:"is-loading",addClassToCurrentBtnOnly:!1,disableCurrentBtnOnly:!1};return{extendConfig:function(t){n=angular.extend(n,t)},$get:function(){return{config:n}}}})},228:function(n,t){angular.module("angularPromiseButtons",[]),angular.module("angularPromiseButtons").directive("promiseBtn",["angularPromiseButtons","$parse",function(n,t){"use strict";var i="click",e="ngClick",a="submit",r="ngSubmit";return{restrict:"EA",scope:{promiseBtn:"=",promiseBtnOptions:"=?"},link:function(s,o,l){function handleLoading(n){c.btnLoadingClass&&!c.addClassToCurrentBtnOnly&&n.addClass(c.btnLoadingClass),c.disableBtn&&!c.disableCurrentBtnOnly&&n.attr("disabled","disabled")}function handleLoadingFinished(n){c.btnLoadingClass&&n.removeClass(c.btnLoadingClass),c.disableBtn&&n.removeAttr("disabled")}function initPromiseWatcher(n,t){s.$watch(n,function(n){n&&n.then?(handleLoading(t),n.finally(function(){handleLoadingFinished(t)})):n&&n.$promise&&(handleLoading(t),n.$promise.finally(function(){handleLoadingFinished(t)}))})}function getCallbacks(n){return n.split(";").map(function(n){return t(n)})}function appendSpinnerTpl(n){n.append(c.spinnerTpl)}function addHandlersForCurrentBtnOnly(n){c.addClassToCurrentBtnOnly&&n.on(i,function(){n.addClass(c.btnLoadingClass)}),c.disableCurrentBtnOnly&&n.on(i,function(){n.attr("disabled","disabled")})}function initHandlingOfViewFunctionsReturningAPromise(n,t,i){s.$evalAsync(function(){var e=getCallbacks(l[t]);o.unbind(n),o.bind(n,function(){s.$apply(function(){e.forEach(function(t){var e=t(s.$parent,{$event:n});u||(u=initPromiseWatcher(function(){return e},i))})})})})}function getSubmitBtnChildren(n){for(var t=[],i=n.find("button"),e=0;e<i.length;e++){var a=i[e];"submit"===angular.element(a).attr("type")&&t.push(a)}return angular.element(t)}var u,d=n.config,c=d;if(l.promiseBtn)appendSpinnerTpl(o),addHandlersForCurrentBtnOnly(o),initPromiseWatcher(function(){return s.promiseBtn},o);else if(l.hasOwnProperty(e))appendSpinnerTpl(o),addHandlersForCurrentBtnOnly(o),initHandlingOfViewFunctionsReturningAPromise(i,e,o);else if(l.hasOwnProperty(r)){var p=getSubmitBtnChildren(o);appendSpinnerTpl(p),addHandlersForCurrentBtnOnly(p),initHandlingOfViewFunctionsReturningAPromise(a,r,p)}s.$watch("promiseBtnOptions",function(n){angular.isObject(n)&&(c=angular.extend({},d,n))},!0)}}}]),angular.module("angularPromiseButtons").provider("angularPromiseButtons",function(){"use strict";var n={spinnerTpl:'<span class="btn-spinner"></span>',disableBtn:!0,btnLoadingClass:"is-loading",addClassToCurrentBtnOnly:!1,disableCurrentBtnOnly:!1};return{extendConfig:function(t){n=angular.extend(n,t)},$get:function(){return{config:n}}}}),n.exports="angularPromiseButtons"}});